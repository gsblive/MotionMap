#
# MotionMap.config
#
#   Version             Comment
#       2.0             Added MultiSensor, Thermostat, Scene and Occupation Actions
#       1.0             Support for Motion Sensor, Companion and Load devices
#
# This file defines the behaviors of all the devices in a MotionMap home automation environment.
# MotionMap operates as a plug-in to a Perceptive Indigo server and is dependant on the Insteon protocols and devices.
# Devices described here consist of Dimmers SwitchesOutletsThermostatsand Motion Sensors
#
# === WARNING DO NOT USE COMMAS IN THIS CSV FILE - EVEN IN THE COMMENTS ===
#
# Indigo Classifications of devices
#
#   Controllers – A device that controls another device. Dimmers and motions sensors are good examples of these
#   Responders – A device that is controlled by another device
#
#
# MotionMap device families and their behavioral traits
#
#  MotionSensor – A motion Sensor that will effect a loadDevice
#  MultiSensor – Same as above, but with additional functionality such as Luminance, temperature, and vibration sensor functions
#  LoadDevices – A Switch or Dimmer usually a loadDevice that can potentially command other devices
#  Companions – A switch or Dimmer that is usually not a loadDevice device but endeavors to mimic the state of a loadDevice device (the non-loadDevice switch in a 3 way hallway switch environment)
#  HVAC_Insteon, HVAC_Nest - Thermostats. MotionMap will use input from these devices along with knowledge of motion and temperature sensors (multisensor) to adjust the climate in the house
#  HVAC_Insteon_Companion - A thermostat that is just used for acquiring human input and temperature sensing (no HVAC control on this unit - it will send messages to an assigned thermostat defined above)
#  OccupationAction - An occupation trigger that can be programatically defined. When triggered an indigo action will be launched
#  Scene - A collection of Load devices that will be turned on or off together. Scenes are a redefinition of the groups defined within indigo that make for a more reliable group control
#
#
# Syntax of this file
#
#  This file is parsed by MotionMap.py. It must be saved in CSV format to operate
#
#  Blank lines are skipped and ignored
#  Processing will continue till the end of the file unless stopped by the “-.” directive below
#  Lines that begin with '#' are comment lines and are not parsed
#  Lines that begin with '-' are directive lines that control the parsing flow as follows:
#
#    -d (or -debug) Turn on normal parsing debugging. This will echo minimal information to the indigo log during parsing for progress monitoring
#    -e (or -echo) Echo the following cell to the console during parsing
#    -h (or -header) The following line is a header for device type in cell B
#    -v (or -verbose) Turn on verbose debugging. This will echo detailed progress information to the indigo log during parsing
#    -p (or -pause) Pause Processing (used while debugging the parser and/or this config file)
#    -r (or -resume) Resume Processing  (used while debugging the parser and/or this config file)
#    -s (or -set) Set an environment variable or preference in MotionMap
#    -. Stop Processing  (used while debugging the parser and/or this config file)
#
########################################################

-echo,Parsing MotionMap.config version 1.0

########################################################
#
# Variable Definitions – There are analogs to these entries in MotionMap.plugin.py
#                                    These variable definitions effect the way MotionMap operates
#
# Syntax:
# -set,VariableName,Value
#
#     Variables:
#        gDebugName,Global Debug Logging setting (how verbose do you want the logs)
#
# Note String conversions will occur automatically in MotionMap.plugin.py
#
########################################################

-set,gDebugMode,0

########################################################
#
# Motion Sensors
#
#   deviceName – The English name of the device
#   maxMovement – How long (in minutes) the sensor is allowed to stay on before forcing it off
#   minMovement – How long (in minutes) that non motion is allowed before non occupancy is assumed
#
#   IMPORTANT – Keep Motion sensors above all other devices because the other devices will register with the motion sensors during initialization (one pass)
#
########################################################

#-h,MotionSensor
#deviceName,maxMovement,minMovement
TestMotion,60,5

########################################################
#
# Multi Sensors
#
#   deviceName – The English name of the device
#   maxMovement – How long (in minutes) the sensor is allowed to stay on before forcing it off
#   minMovement – How long (in minutes) that non motion is allowed before non occupancy is assumed
#
#   IMPORTANT – Keep Multi sensors between motion sensors and all other devices because the other devices will register with the motion sensors during initialization (one pass)
#
########################################################

-h,Multisensor
deviceName,maxMovement,minMovement
TestMultiSensor,60,1

########################################################
#
#    LoadDevices – Usually a Dimmer Switch or Outlet
#
#   deviceName – The English name of the device
#   maxNonMotionTime – The maximum of time (in minutes) that this device is allowed to stay on while receiving no motion events
#   maxOnTime – The maximum of time (in minutes) that this device is allowed to stay on (regardless of motion sensor)
#   daytimeOnLevel – The light level to turn this device during the daytime 0 is off1 is on for switch1-100 is percent for dimmer
#   nighttimeOnLevel – The light level to turn this device during the daytime (0 is off1 is on for switch1-100 is percent for dimmer)
#	specialFeatures = A list that can contain any or the following string commands
#						flash: flash the device 1 minute prior to turning off;
#						beep: beep the device 1 minute prior to turning off;
#						bedtime: beep the device 1 minute prior to turning off
#   onControllers – these are the controllers (motion sensors) that will turn this device on (and sustain sustain)
#   sustainControllers – these are the controllers (motion sensors) that can keep a device on (sustain only will not turn the device on)
#	maxSequentialErrorsAllowed - (optional, default is 2) the maximum numbers of consecutive errors allowd before marking this device unnresponsive
#
# WARNING Dont use Occupation Events and Load Controllers (in the load device definition) at the same time for the same load device. Unpredictable results will occur.
#
########################################################

#-h,LoadDevice
#deviceName,maxNonMotionTime,maxOnTime,daytimeOnLevel,nighttimeOnLevel,specialFeatures,onControllers,sustainControllers,maxSequentialErrorsAllowed

########################################################
#
#    zLoadDevices – Usually a Dimmer Switch or Outlet (Z-Wave Version)
#
#   deviceName – The English name of the device
#   maxNonMotionTime – The maximum of time (in minutes) that this device is allowed to stay on while receiving no motion events
#   maxNonMotionTime – The maximum of time (in minutes) that this device is allowed to stay on while receiving no motion events
#   maxOnTime – The maximum of time (in minutes) that this device is allowed to stay on (regardless of motion sensor)
#   daytimeOnLevel – The light level to turn this device during the daytime 0 is off1 is on for switch1-100 is percent for dimmer
#   nighttimeOnLevel – The light level to turn this device during the daytime (0 is off1 is on for switch1-100 is percent for dimmer)
#	specialFeatures = A list that can contain any or the following string commands
#						flash: flash the device 1 minute prior to turning off;
#						beep: beep the device 1 minute prior to turning off;
#						bedtime: beep the device 1 minute prior to turning off
#   onControllers – these are the controllers (motion sensors) that will turn this device on (and sustain sustain)
#   sustainControllers – these are the controllers (motion sensors) that can keep a device on (sustain only will not turn the device on)
#	maxSequentialErrorsAllowed - (optional, default is 2) the maximum numbers of consecutive errors allowed before marking this device unnresponsive
#
# WARNING Dont use Occupation Events and Load Controllers (in the load device definition) at the same time for the same load device. Unpredictable results will occur.
#
########################################################

-h,zLoadDevice
deviceName,maxNonMotionTime,maxOnTime,daytimeOnLevel,nighttimeOnLevel,specialFeatures,onControllers,sustainControllers,maxSequentialErrorsAllowed
TestPowerStrip - Outlet 1,2,5,100,100,flash,TestMultiSensor,,2

########################################################
#
# Companion – Usually a Dimmer or Switch
#
#   deviceName – The English name of the device
#   loadDeviceName -  The LoadDevice for this companion
#	maxSequentialErrorsAllowed - (optional, default is 2) the maximum numbers of consecutive errors allowd before marking this device unnresponsive
#
########################################################

#-h,Companion
#deviceName,loadDeviceName,maxSequentialErrorsAllowed
#BottomFloorRoomLightNearStairs,BottomFloorRoomNearDoorP,2

########################################################
#
# HVAC_Insteon – Thermostat
#
#   deviceName – The English name of the device
#   operationalMode -  HvacAutoMode,HvacHeatMode, or HvacCoolMode
#   onControllers – these are the controllers (motion sensors) that will turn this device on (and sustain sustain)
#   sustainControllers – these are the controllers (motion sensors) that can keep a device on (sustain only will not turn the device on)
#	coolSetpoint - the default cool set point
#	heatSetpoint - the default heat set point
#	updateFrequency - how often do you want the settings to be re-evaluated... in minutes
#	fanOnThreshold - the maximum temperature threshold where the fans will turn on to mix the air
#	maxSequentialErrorsAllowed - (optional, default is 2) the maximum numbers of consecutive errors allowd before marking this device unnresponsive
#	allowAsync - Allow this device to receive async commands (1 or 0)
#
########################################################

#-h,HVAC_Insteon
#deviceName,operationalMode,onControllers,sustainControllers,coolSetpoint,heatSetpoint,updateFrequency,fanOnThreshold,maxSequentialErrorsAllowed,allowAsync
#HVACMiddleFloor,HvacHeatMode,MiddleFloorBathToiletMotion;MiddleFloorBathMotion;TopFloorStairsMotion,TopFloorMasterMotion,76,66,15,7,3,0

########################################################
#
# HVAC_Nest – Nest Thermostat (Be sure to turn off schedule and away learning on the device - its handled by motionmap now)
#
#   deviceName – The English name of the device
#   operationalMode -  HvacAutoMode,HvacHeatMode, or HvacCoolMode
#   onControllers – these are the controllers (motion sensors) that will turn this device on (and sustain sustain)
#   sustainControllers – these are the controllers (motion sensors) that can keep a device on (sustain only will not turn the device on)
#	coolSetpoint - the default cool set point
#	heatSetpoint - the default heat set point
#	updateFrequency - how often do you want the settings to be re-evaluated... in minutes
#	fanOnThreshold - the maximum temperature threshold where the fans will turn on to mix the air
#	maxSequentialErrorsAllowed - (optional, default is 2) the maximum numbers of consecutive errors allowd before marking this device unnresponsive
#	allowAsync - Allow this device to receive async commands (1 or 0)
#
########################################################

#-h,HVAC_Nest
#deviceName,operationalMode,onControllers,sustainControllers,coolSetpoint,heatSetpoint,updateFrequency,fanOnThreshold,maxSequentialErrorsAllowed,allowAsync

########################################################
#
# HVAC_Insteon_Companion – Thermostat
#
# The Insteon wireless thermostat is typically used for this device, it is battery powered and goes to sleep. This means
#	that we cannot send commands to this thermostat nor can we send update requests. Instead, what we do is watch for commands from this device and
#	use that information to influence the settings of the associated master thwermostat (which actually controls the furnace and air conditioner).
#	We do, however get information that is broadcast from this thermostat when something in it changes, we note this information and can provide it to
#	other devices when we are asked for it.
#
#   deviceName – The English name of the device
#   operationalMode -  HvacAutoMode,HvacHeatMode, or HvacCoolMode
#   master – this thermostat's master (all of this thermostat's commands get passed on to the master for action)
#	coolSetpoint - the default cool set point
#   coolInfluence – the amount of influence by percent this thermostat has on the master's cool setting
#	heatSetpoint - the default heat set point
#   heatInfluence – the amount of influence by percent this thermostat has on the master's heat setting
#	occupancySensor - the occupancy sensor governing the motion detection for this thermostat
#	allowAsync - Allow this device to receive async commands (1 or 0)
#
########################################################

#-h,HVAC_Insteon_Companion
#deviceName,operationalMode,master,coolSetpoint,coolInfluence,heatSetpoint,heatInfluence,occupancySensor,allowAsync
#HVACCompanionTopFloor,HvacMonitor,HVACMiddleFloor,76,30,66,30,,0

########################################################
#
# Scene – What devices are associated with a scene,
#
#   deviceName – The English name of the device,
#   aliasedDevice -  The device that this device aliases,
#
########################################################

#-h,Scene
#deviceName,sceneNumber,members
#MasterBathroomAll,9,TopFloorMasterBathToiletFanLightP;TopFloorMasterBathTubLightP;TopFloorMasterBathVanityP

########################################################
#
# OccupationAction – IndigoActionGroups to execute based on area occupation
#
#   deviceName – The name of the OccupationAction
#   occupationEvent -  'on', 'off', 'occupied' or 'unoccupied'
#	when - When this occupationAction is valid ... 'day','night','anyTime'
#   activateAction – The name of the ActionGroup to perform when this occupation becomes activated
#   activateDelayMinutes - The amount that must transpire (in minutes) after the occupationEvent before executing the action
#   deactivateAction – The name of the ActionGroup to perform when this occupation becomes deactivated
#   deactivateDelayMinutes - The amount of time that must transpire (in minutes) after the reversal of occupationEvent before executing deactivateAction
#	mode - What actionControllers must agree before the actiateAction occurs... 'any' or 'all'
#	actionControllers - The controllers that can trigger this action
#
# WARNING Dont use Occupation Events and Load Controllers (in the load device definition) at the same time for the same load device. Unpredictable results will occur.
#
########################################################

#-h,OccupationAction
#deviceName,occupationEvent,when,activateAction,activateDelayMinutes,deactivateAction,deactivateDelayMinutes,mode,actionControllers
#TestEnvironment00,occupied,anyTime,TestPowerStrip Occupied,1,TestPowerStrip Unoccupied,1,all,TestMultiSensor
#TestEnvironment00,occupied,anyTime,TestPowerStrip Occupied,0,,0,all,TestMultiSensor
#TestEnvironment0,occupied,anyTime,TestPowerStrip Occupied,0,TestPowerStrip Unoccupied,1,all,TestMultiSensor
#TestEnvironment1,occupied,anyTime,TestPowerStrip Occupied,1,TestPowerStrip Unoccupied,1,all,TestMultiSensor
#TestEnvironment2,unoccupied,anyTime,TestPowerStrip Unoccupied,1,,0,all,TestMultiSensor
#TestEnvironment3,occupied,anyTime,TestPowerStrip Occupied,1,,0,all,TestMultiSensor
