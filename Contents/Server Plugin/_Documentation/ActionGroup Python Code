
_MotionMap SpeedTest

#import itertools
import appscript
import time
theDeviceName = 'GregsOfficeLight'
bypassMMQueue = 0	# make this 0 to use mm queue, 1 to bypass the mm queue
theTriggerName = 'GregsExampleTrigger'
theVarName = "triggerTimeStamp"
theLevel = 100

lamp = indigo.devices[theDeviceName]

mmId = indigo.variables["MMListenerName"].value
mmPlugin = indigo.server.getPlugin(mmId)


def createTimingTrigger():

# The trigger we create will stop the clock to give us elapsed time to complete these asynchronous tasks performed here.
# When the dimmer named above goes to brightness level 1, the trigger executes.

	try:
		theTrigger=indigo.triggers[theTriggerName]
	except:
		theTrigger=indigo.devStateChange.create(name=theTriggerName)


	theTrigger.deviceId = lamp.id
	theTrigger.description  = "This trigger was created by the Action Group \"_MotionMap SpeedTest\". It is incomplete pending changes in Indigo > 7.0. See \"_MotionMap SpeedTest\" for details."
	theTrigger.stateChangeType = indigo.kStateChange.BecomesEqual
	theTrigger.stateSelector = "brightnessLevel"
	theTrigger.stateValue = "1"
#	theTrigger.actions = Your python code here (not implemented yet in Indigo 7)
	theTrigger.replaceOnServer()

# Add the trigger code (Cant be done yet until changes occur in Indigo 7.0+

#	indigo.server.log(str(theTrigger))

# This is an old way, but I couldnt get it to work

#	isapp = appscript.app("IndigoServer")
#	isapp.trigger_actions[theTriggerName].action_steps[1].script_code.set("\n")
#	indigo.trigger.enable(theTrigger.id, value=True)

	return


if mmPlugin.isEnabled():

	theBrightness = lamp.brightness
	indigo.server.log("  ### Gregs Office Light Starting Brightness:" + str(theBrightness) + ".")

	startTime = time.time()

	try:
		theVarValue = indigo.variables[theVarName].value
	except:
		indigo.server.log(">>> Indigo variable  \'" + theVarName + "\' does not exist... creating it and setting it to \'" + str(startTime) + "\' .")
		theVarValue = indigo.variable.create(theVarName, str(startTime))

	indigo.variable.updateValue(theVarName, str(startTime))

	createTimingTrigger()

	if bypassMMQueue != 0:
		while theLevel > 0:
			mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'brighten','theDevice':theDeviceName,'theValue':theLevel,'retry':2,'theMode':'IMMED'})
			theLevel -=1
		mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'brighten','theDevice':theDeviceName,'theValue':theBrightness,'retry':2,'theMode':'IMMED'})
	else:
		while theLevel > 0:
			# We have to add the noflush here because the MM queue will normally automatically optimize similar commands already queued (purge them)
			# because only the last command has any real relavance. Testing (like this script) is the only real time we would use noflush.
			mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'brighten','theDevice':theDeviceName,'theValue':theLevel,'retry':2, 'NoFlush':'yes'})
			theLevel -=1
		mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'brighten','theDevice':theDeviceName,'theValue':theBrightness,'retry':2, 'NoFlush':'yes'})

	deltaTime = time.time()
	indigo.server.log("    Time to complete queuing:" + str(round(time.time() - deltaTime, 4)) + "s. mmLib_Log.start() completed.")
else:
	indigo.server.log("MotinMap not Enabled")

###########

Associated Trigger

##########

TimeTestTrigger or whatever is named in theTriggerName above


import time
theVarName = "triggerTimeStamp"

try:
	theValue = indigo.variables[theVarName].value
	if theValue != "":
		deltaTime = time.time() - float(indigo.variables[theVarName].value)
		indigo.server.log("  ###TriggerTime:" + str(round(deltaTime, 2)) + "s.")
		indigo.variable.updateValue(theVarName, str(""))

except:
	indigo.server.log(">>> Indigo variable  \'" + theVarName + "\' does not exist... creating it and setting it to \'" + str("") + "\' .")
	theVarValue = indigo.variable.create(theVarName, str(""))

indigo.variable.updateValue(theVarName, str(""))


################

_MotionMap PrintDelayQueue

mmId = indigo.variables["MMListenerName"].value
mmPlugin = indigo.server.getPlugin(mmId)
if mmPlugin.isEnabled():
	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'printDelayQueue'})
	#mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'printDelayQueue', 'theDevice':'GregsOfficeClosetDimmer'})
	#mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'printDelayQueue', 'proc': 'offTimerCallback'})
else:
	indigo.server.log("MotinMap not Enabled")

################

_Test GetSeviceLinks

theDeviceName = "PowerLinc Interface"
links = indigo.rawServerRequest("GetLinksForDevice", {"Name": theDeviceName})
#indigo.server.log("### Start PowerLinks" + unicode(links))
#return 0
theControllerList = links["ControllerList"]
for theLink in theControllerList:
 try:
  theControllerDevice = indigo.devices[theLink["DeviceNameUI"]]
  indigo.server.log("Controller Found: " + theControllerDevice.name)
 except:
  indigo.server.log("###Invalid Controller for device: " + theDeviceName + ". DeviceNameUI: " + theLink["DeviceNameUI"] + ". GroupNum: " + str(theLink["GroupNum"]))


################


   Display ZWave Object

devnumber = 833678262
#indigo.server.log(indigo.devices[devnumber].globalProps["com.perceptiveautomation.indigoplugin.zwave"]["zwNodeNeighborsStr"])
indigo.server.log(unicode(indigo.devices[devnumber]))

##################

  _MotionMap popCommandQ

mmId = indigo.variables["MMListenerName"].value
mmPlugin = indigo.server.getPlugin(mmId)
if mmPlugin.isEnabled():
	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'popCommandQ'})
else:
	indigo.server.log("MotinMap not Enabled")

##################

  _MotionMap PrintBatteryReport

mmId = indigo.variables["MMListenerName"].value
mmPlugin = indigo.server.getPlugin(mmId)
if mmPlugin.isEnabled():
	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'batteryReport'})
else:
	indigo.server.log("MotinMap not Enabled")

##################

  _MotionMap PrintCommandQueue

mmId = indigo.variables["MMListenerName"].value
mmPlugin = indigo.server.getPlugin(mmId)
if mmPlugin.isEnabled():
	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'printCommandQueue'})
else:
	indigo.server.log("MotinMap not Enabled")

##################


  _MotionMap PrintDeviceStatus

import time
mmId = indigo.variables["MMListenerName"].value
mmPlugin = indigo.server.getPlugin(mmId)
if mmPlugin.isEnabled():
	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'devStatus','theDevice':'3rd Floor Stairway Chandelier P','theValue':0,'theMode':'IMMED'})
#	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'devStatus','theDevice':'Master Bath Shower Light P','theValue':0,'theMode':'IMMED'})
#	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'devStatus','theDevice':'3rd Floor Stairway Sconce P','theValue':0,'theMode':'IMMED'})
#	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'devStatus','theDevice':'OfficeLampP','theValue':0,'theMode':'IMMED'})
#	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'devStatus','theDevice':'GarageYardDoorLockControl','theValue':0,'theMode':'IMMED'})
#	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'devStatus','theDevice':'GarageHouseDoorLockControl','theValue':0,'theMode':'IMMED'})
#	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'devStatus','theDevice':'Hallway Thermostat','theValue':0,'theMode':'IMMED'})
else:
	indigo.server.log(">>> MotionMap is NOT enabled.”)

##################


  _MotionMap PrintMotionStatus

mmId = indigo.variables["MMListenerName"].value
mmPlugin = indigo.server.getPlugin(mmId)
if mmPlugin.isEnabled():
#	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'motionStatus','theDevice':'all','theValue':100})
#	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'motionStatus','theDevice':'OfficeLampP','theValue':0})
	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'motionStatus','theDevice':'on','theValue':100})
else:
	indigo.server.log(">>> MotionMap is NOT Enabled”)

##################


  _MotionMap PrintOfflineReport

mmId = indigo.variables["MMListenerName"].value
mmPlugin = indigo.server.getPlugin(mmId)
if mmPlugin.isEnabled():
#	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'offlineReport'})
#	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'offlineReport','theDevice':'all', 'theMode':'Email'})
	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'offlineReport','theDevice':'errorCounter'})
else:
	indigo.server.log("MotinMap not Enabled")

##################

  _MotionMap ResetOfflineStatistics

mmId = indigo.variables["MMListenerName"].value
mmPlugin = indigo.server.getPlugin(mmId)
if mmPlugin.isEnabled():
	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'resetOfflineStatistics'})
else:
	indigo.server.log("MotinMap not Enabled")


##################


  _MotionMap RestartCommandQ

mmId = indigo.variables["MMListenerName"].value
mmPlugin = indigo.server.getPlugin(mmId)
if mmPlugin.isEnabled():
	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'restartCommandQ'})
else:
	indigo.server.log("MotinMap not Enabled”)

##################

  _MotionMap Test

mmId = indigo.variables["MMListenerName"].value
mmPlugin = indigo.server.getPlugin(mmId)
if mmPlugin.isEnabled():
#	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'brighten','theDevice':'OfficeLampP','theValue':0,'theMode':'IMMED'})
	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'brighten','theDevice':'OfficeLampP','theValue':100,'retry':2})
	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'toggle','theDevice':'OfficeLampP','theValue':0})
	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'beep','theDevice':'OfficeLampP','theValue':0})
	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'beep','theDevice':'OfficeLampP','theValue':0,'repeat':1})
	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'brighten','theDevice':'OfficeLampP','theValue':0,'retry':2})
	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'brighten','theDevice':'OfficeLampP','theValue':0,'retry':2})
	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'brighten','theDevice':'OfficeLampP','theValue':0,'retry':2})
	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'brighten','theDevice':'OfficeLampP','theValue':0,'retry':2})
	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'brighten','theDevice':'OfficeLampP','theValue':100,'retry':2})
	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'toggle','theDevice':'OfficeLampP','theValue':100,'retry':2})
	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'brighten','theDevice':'OfficeLampP','theValue':100,'retry':2})
	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'printCommandQueue'})
else:
	indigo.server.log("MotinMap not Enabled")


##################


  _MotionMap Test copy


mmId = indigo.variables["MMListenerName"].value
mmPlugin = indigo.server.getPlugin(mmId)
if mmPlugin.isEnabled():
#	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'brighten','theDevice':'OfficeLampP','theValue':0,'theMode':'IMMED'})
	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'brighten','theDevice':'OfficeLampP','theValue':100,'retry':2})
	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'toggle','theDevice':'OfficeLampP','theValue':0})
	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'beep','theDevice':'OfficeLampP','theValue':0})
	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'beep','theDevice':'OfficeLampP','theValue':0,'repeat':1})
	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'brighten','theDevice':'OfficeLampP','theValue':0,'retry':2})
	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'brighten','theDevice':'OfficeLampP','theValue':0,'retry':2})
	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'brighten','theDevice':'OfficeLampP','theValue':0,'retry':2})
	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'brighten','theDevice':'OfficeLampP','theValue':0,'retry':2})
	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'brighten','theDevice':'OfficeLampP','theValue':100,'retry':2})
	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'toggle','theDevice':'OfficeLampP','theValue':100,'retry':2})
	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'brighten','theDevice':'OfficeLampP','theValue':100,'retry':2})
	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'printCommandQueue'})
else:
	indigo.server.log("MotinMap not Enabled")


##################


  _MotionMap Test Flash

mmId = indigo.variables["MMListenerName"].value
mmPlugin = indigo.server.getPlugin(mmId)
if mmPlugin.isEnabled():
	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'flash','theDevice':'OfficeLampP','theValue':100,'retry':2})
else:
	indigo.server.log("MotinMap not Enabled")


##################


  _MotionMap Test RawCommand

mmId = indigo.variables["MMListenerName"].value
mmPlugin = indigo.server.getPlugin(mmId)
if mmPlugin.isEnabled():
	#Set downstairs cool setpoint to 80
	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'sendRawInsteonCommand','theDevice':'HVACDownstairs','ackWait':1,'cmd1':108,'cmd2':162,'retry':2})
else:
	indigo.server.log("MotinMap not Enabled")

##################


  _MotionMap Test RawCommandExtended

mmId = indigo.variables["MMListenerName"].value
mmPlugin = indigo.server.getPlugin(mmId)
if mmPlugin.isEnabled():
	#Set downstairs cool setpoint to 80
	#This extended Command is: [ Command (108), temp*2, temp*2 (again), deadband (we use 4), 0]
	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'sendRawInsteonCommand','theDevice':'HVACDownstairs','ackWait':0,'extended':1,'cmd1':108,'cmd2':80*2,'cmd3':80*2,'cmd4':4,'cmd5':0,'retry':2})
else:
	indigo.server.log("MotinMap not Enabled")

##################


  _MotionMap Test RawCommandExtended EnableStatusChange

mmId = indigo.variables["MMListenerName"].value
mmPlugin = indigo.server.getPlugin(mmId)
if mmPlugin.isEnabled():
	#Enable Status Change Mewssages
	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'sendRawInsteonCommand','theDevice':'HVACDownstairs','ackWait':0,'extended':1,'cmd1':107,'cmd2':22,'cmd3':22,'cmd4':0,'cmd5':0,'retry':2})
else:
	indigo.server.log("MotinMap not Enabled")

##################


  _MotionMap VerifyLogMode

mmId = indigo.variables["MMListenerName"].value
mmPlugin = indigo.server.getPlugin(mmId)
if mmPlugin.isEnabled():
	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'verifyLogMode'})
else:
	indigo.server.log("MotinMap not Enabled")

##################


 _MotionMap 1stFloorBedAndBathAllSceneOff

mmId = indigo.variables["MMListenerName"].value
mmPlugin = indigo.server.getPlugin(mmId)
if mmPlugin.isEnabled():
	mmPlugin.executeAction("executeMMCommand", deviceId=0, props={'theCommand':'sceneOff','theDevice':'1stFloorBedAndBathAll'})
else:
	indigo.server.log("MotinMap not Enabled")




